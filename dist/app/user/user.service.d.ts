import { User } from '../../database/models/user.model';
import { Posts } from 'src/database/models/post.model';
import { JwtService } from '@nestjs/jwt';
import { Service } from 'src/database/models/service.model';
import { FreeLance } from 'src/database/models/freeLance.model';
import { Rating } from 'src/database/models/rating.model';
import { WalletService } from '../wallet/wallet.service';
import { Stagging } from 'src/database/models/stagging.model';
import { Category } from 'src/database/models/category.model';
import { UserRequest } from 'src/database/models/userRequest.model';
import { postWithPoint } from 'src/database/models/postWithPoint.model';
import { Complaint } from 'src/database/models/complaint.model';
export declare class UserService {
    private userModel;
    private freeLanceModel;
    private readonly staggingModele;
    private readonly ratingModele;
    private postModel;
    private readonly serviceModele;
    private readonly categoryModele;
    private readonly userRequestModele;
    private readonly postWithPointModele;
    private readonly walletService;
    private readonly complaintModele;
    private readonly jwtService;
    constructor(userModel: typeof User, freeLanceModel: typeof FreeLance, staggingModele: typeof Stagging, ratingModele: typeof Rating, postModel: typeof Posts, serviceModele: typeof Service, categoryModele: typeof Category, userRequestModele: typeof UserRequest, postWithPointModele: typeof postWithPoint, walletService: WalletService, complaintModele: typeof Complaint, jwtService: JwtService);
    createPost(published: Posts, user: User): Promise<Posts>;
    getMyPost(id: string): Promise<Posts[]>;
    servicesOnPost(id: number): Promise<Service[]>;
    showFreeLanceinfo(id: number): Promise<{
        freeLance: FreeLance;
        rate: any;
    }>;
    rateFreeLance(freeLanceId: number, userId: number, rate: number): Promise<number>;
    acceptRequest(serviceId: number, userId: number): Promise<Service>;
    searchAboutFreeLance(Fname: string, Lname: string): Promise<FreeLance[]>;
    showAllCategory(): Promise<Category[]>;
    searchAboutCategory(catName: string): Promise<Category[]>;
    adddRequestOnPostPoint(postId: number, userId: number): Promise<UserRequest>;
    deletRequest(id: number): Promise<boolean>;
    showMyRequests(userId: number): Promise<UserRequest[]>;
    showAcceptedRequests(userId: number): Promise<UserRequest[]>;
    showRejectRequest(userId: number): Promise<UserRequest[]>;
    showPostpoint(): Promise<postWithPoint[]>;
    showPostPointByCategory(category: string): Promise<postWithPoint[]>;
    addComplaint(serviceId: number, userId: number, content: string): Promise<Complaint>;
}
